# .github/workflows/pr-ci.yml

# Name of the workflow, which will be displayed in the GitHub Actions UI.
name: Pull Request CI

# Specifies the events that trigger the workflow.
# This workflow runs whenever:
# - A new pull request is opened (`opened`).
# - An existing pull request is edited (`edited`).
# - A pull request's code is synchronized (i.e., new commits are pushed) (`synchronize`).
on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  ci:
    # Specifies the environment on which this job will run.
    # `ubuntu-latest` is a recent version of the Ubuntu operating system.
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository's code
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4
        with:
          # This is necessary for SonarCloud to analyze the pull request correctly.
          fetch-depth: 0

      # Step 2: Set up Node.js
      - name: Set up Node.js
        id: setup_node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Step 3: Install dependencies
      # This step installs the project's dependencies using npm.
      # `npm ci` is used for clean installs based on the package-lock.json file.
      - name: Install dependencies
        id: install_dependencies
        run: npm ci

      # Step 4: Run tests and generate code coverage
      # This step runs tests in headless mode and generates a coverage report in lcov format.
      - name: Run tests with coverage
        id: run_tests
        # The `--no-watch` and `--no-progress` flags are used to avoid unnecessary output.
        # The `--code-coverage` flag generates the coverage report.
        # The coverage report will be saved in the `coverage` directory.
        run: npm test -- --no-watch --no-progress --code-coverage

      # Step 5. Upload the coverage report to Codecov
      # This step sends the generated report to the Codecov service for analysis.
      # It requires the CODECOV_TOKEN secret to authenticate with Codecov.
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # The `files` parameter specifies the path to the lcov report file.
          files: ./coverage/lcov.info
          # The `fail_ci_if_error` option ensures that the CI job fails if there is
          fail_ci_if_error: true
      
      # Step 6: Run a security scan
      # This step checks for known vulnerabilities in the project's dependencies.
      - name: Run npm audit to check for vulnerabilities
        id: npm_audit
        # The `--audit-level=high` flag ensures that only vulnerabilities of high severity or
        # higher will cause the command to fail.
        run: npm audit --audit-level=high

      # Step 7: SonarCloud analysis
      # This step performs a static analysis of the code.
      # It requires the SONAR_TOKEN, SONAR_PROJECT_KEY, and SONAR_ORGANIZATION secrets.
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Token generated from SonarCloud
        with:
          # Add the following values as environment variables or secrets
          # in your GitHub repository to configure SonarCloud.
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src/
            -Dsonar.tests=src/
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.coverage.exclusions=**/*.spec.ts,src/main.ts,src/test.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      # Step 8: Build the Angular SSR application
      # This step verifies that the application compiles correctly after all checks.
      - name: Build Angular App
        run: npm run build